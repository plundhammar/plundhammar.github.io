<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CUDA on plundhammar</title>
    <link>https://plundhammar.github.io/tags/cuda/</link>
    <description>Recent content in CUDA on plundhammar</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Jul 2024 00:40:04 -0900</lastBuildDate>
    <atom:link href="https://plundhammar.github.io/tags/cuda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>`Compton_MLEM`, A GPU-Based Image Reconstruction Application in CUDA</title>
      <link>https://plundhammar.github.io/posts/compton_mlem-a-gpu-based-image-reconstruction-application-in-cuda/</link>
      <pubDate>Fri, 26 Jul 2024 00:40:04 -0900</pubDate>
      <guid>https://plundhammar.github.io/posts/compton_mlem-a-gpu-based-image-reconstruction-application-in-cuda/</guid>
      <description>&lt;p&gt;&lt;strong&gt;In this post I want to try to reconstruct an image from the simulated data in the previous post. Supposedly the original source consists of two point sources close together around z= -0.5 cm. However, I found it hard to understand the properties of the reconstruction. I will need to redo this simulation with full a priori information about the simulated source.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, I have looked into the reconstruction application &lt;code&gt;Compton_MLEM&lt;/code&gt; by Matt Leigh, Ref. [1]. It is written in CUDA Ref. [2], an extension of the C programming language with the ability to specify thread-level parallelism in C. This programming language was new to me, and I had a hard time simply trying to install the necessary software to make everything work (especially the nividia drivers caused me some headache)! I recommend doing the tutorial in Ref. [3] just to get a feeling for the language, and to demystify it. It is very similar to C++, but with some additional methods to parallelize the calculations.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
